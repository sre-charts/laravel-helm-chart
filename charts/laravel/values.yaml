# Default values for laravel.

replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Configure Laravel container.
laravel:
  image:
    repository: ""
    pullPolicy: IfNotPresent
    tag: ""

  env: {}
  #  APP_NAME: "laravel"
  #  APP_ENV: "production"

  extraEnv: []
  #  - name: FOO
  #    value: "bar"

  # The envWithTpl array below has the same usage as "env", but is using the tpl function to support templatable string.
  # This can be useful when you want to pass dynamic values to the Chart using the helm argument "--set <variable>=<value>"
  # https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  envWithTpl: {}
  #  - name: FOO_2
  #    value: "{{ .Values.foo2 }}"
  #
  # foo2: bar2

  extraEnvFrom: []

  # Important! After this container has started, the PHP files
  # in our Docker image aren't in the shared volume. We need to 
  # get them into the shared volume. If we tried to write directly
  # to this volume from our Docker image the files wouldn't appear
  # in the nginx container.
  #
  # So, after the container has started, copy the PHP files from this
  # container's local filesystem (/app or /var/www/html -- added via the Docker image) 
  # to the shared volume, which is mounted at /usr/share/nginx/html.
  lifecycle: {}
  #  postStart:
  #    exec:
  #      command: ["/bin/sh", "-c", "cp -r /var/www/html/. /usr/share/nginx/html"]
  
  livenessProbe: {}
  readinessProbe: {}

nginx:
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: alpine

  service:
    type: NodePort
    port: 80
  
  livenessProbe: {}
  readinessProbe: {}

  # Specify the Config name to pull the nginx configuration from.
  # If not specified, it defaults to "{release name}-nginx-config".
  # This will be automatically be created for you.
  # configName: ""

  # If no configName is specified, this will be the config
  # applied to the NGINX in-pod container.
  config: |
    server {
      listen 80;
      server_name _;
      sendfile on;
      default_type application/octet-stream;
      include /etc/nginx/mime.types;
      
      root /usr/share/nginx/html/public;
      index index.php index.html;
      
      location / {
        try_files $uri $uri/ /index.php?$query_string;
      }
      
      error_page 404 /index.php;
      location = /favicon.ico { access_log off; log_not_found off; }
      location = /robots.txt  { access_log off; log_not_found off; }

      location ~ \.php$ {
          try_files $uri =404;
          fastcgi_split_path_info ^(.+.php)(/.+)$;
          fastcgi_pass 127.0.0.1:9000;
          fastcgi_intercept_errors on;
          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param PATH_INFO $fastcgi_path_info;
      }

      location ~ /\.ht {
        deny all;
      }

      location ~ /\.(?!well-known).* {
        deny all;
      }
    }

strategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 0
  #   maxUnavailable: 1

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 50m
  #   memory: 64Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
